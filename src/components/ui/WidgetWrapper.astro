---
import type { HTMLTag } from 'astro/types';
import type { Widget } from '~/types';
import { twMerge } from 'tailwind-merge';
import WrapperContent from './WrapperContent.astro';

export interface Props extends Widget {
  containerClass?: string;
  wrapperClass?: string;
  roundTopClass?: string;
  roundBottomClass?: string;
  ['as']?: HTMLTag;
}

const {
  id,
  isDark = false,
  containerClass = '',
  wrapperClass = '',
  roundTopClass = '',
  roundBottomClass = '',
  bg,
  as = 'section',
} = Astro.props;

const WrapperTag = as;
---

<>
  <WrapperTag
    class={twMerge('relative not-prose scroll-mt-[72px] overflow-hidden', wrapperClass)}
    {...id ? { id } : {}}
  >
    {
      roundTopClass && (
        <div class={twMerge(roundTopClass)}>
          <div class={twMerge('absolute top-0 left-0 w-full h-full', roundTopClass)} />
          <div class={twMerge('relative w-full h-full max-w-8xl mx-auto', wrapperClass)}>
            <div class={twMerge('absolute top-0 w-full h-full ', roundTopClass)} />
            <div
              class={twMerge(
                'absolute top-[40px] left-[-40px] w-[calc(100%+80px)] h-full blur-lg rounded-t-full',
                wrapperClass
              )}
            />
            <WrapperContent bg={bg} containerClass={containerClass} isDark={isDark}>
              <slot />
            </WrapperContent>
          </div>
        </div>
      )
    }
    {
      !roundTopClass && !roundBottomClass && (
        <WrapperContent bg={bg} containerClass={containerClass} isDark={isDark}>
          <slot />
        </WrapperContent>
      )
    }
    {
      roundBottomClass && (
        <div class={twMerge(roundBottomClass)}>
          <div class={twMerge('absolute top-0 left-0 w-full h-full', roundBottomClass)} />
          <div class={twMerge('relative w-full h-full max-w-8xl mx-auto', wrapperClass)}>
            <div class={twMerge('absolute bottom-0 w-full h-full', roundBottomClass)} />
            <div
              class={twMerge(
                'absolute bottom-[40px] left-[-40px] w-[calc(100%+80px)] h-full blur-lg rounded-b-full',
                wrapperClass
              )}
            />
            <WrapperContent bg={bg} containerClass={containerClass} isDark={isDark}>
              <slot />
            </WrapperContent>
          </div>
        </div>
      )
    }
  </WrapperTag>
</>

---
import { t } from 'i18next';
import { twMerge } from 'tailwind-merge';

const { translateKey, className, highlightClassName, noWrap = false } = Astro.props;

const value = t(`${translateKey}.content`);
const indexArray = t(`${translateKey}.highlightIndexes`)
  .split(', ')
  .map((item) => Number(item));
const newLineArray = t(`${translateKey}.newLineIndexes`)
  .split(', ')
  .map((item) => Number(item));

// Split by space and slash, but preserve '/' in 'world map'
const words: string[] = value.split(/(\s+|\/)/).reduce((acc, part, index, arr) => {
  if (part === '/' && arr[index - 1] === 'world' && arr[index + 1] === 'map') {
    acc[acc.length - 1] += part + arr[index + 1];
    arr[index + 1] = '';
  } else if (part !== '') {
    acc.push(part);
  }
  return acc;
}, [] as string[]);

// Group words by line based on newLineArray
const lines: string[][] = [];
let currentLine: string[] = [];

words.forEach((word, index) => {
  currentLine.push(indexArray.includes(index) ? `<span class="${highlightClassName}">${word}</span>` : word);
  if (newLineArray.includes(index)) {
    lines.push([...currentLine]);
    currentLine = [];
  }
});

if (currentLine.length > 0) lines.push(currentLine);
---

<div class={className}>
  {lines.map((line) => <span class={twMerge(noWrap && 'whitespace-nowrap block')} set:html={line.join(' ')} />)}
  <slot />
</div>
